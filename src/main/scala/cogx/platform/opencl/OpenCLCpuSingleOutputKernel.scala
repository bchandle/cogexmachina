/*
 * (c) Copyright 2016 Hewlett Packard Enterprise Development LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cogx.platform.opencl

import cogx.platform.types.{VirtualFieldRegister, FieldType, Opcode}

/** Class for a kernel which runs on the CPU with one output field.
  *
  * @param opcode The operation performed by this kernel.
  * @param in The virtual field registers driving the inputs of this kernel.
  * @param fieldType The type of the result generated by this kernel.
  * @param needActor True if this kernel needs to run in an actor because it
  *        could potentially block, e.g. making system calls, or because it's
  *        desired to have more parallism.
  *
  * @author Dick Carter
  */
private[cogx]
abstract class OpenCLCpuSingleOutputKernel(opcode: Opcode,
                               in: Array[VirtualFieldRegister],
                               val fieldType: FieldType,
                               needActor: Boolean = true)
  extends OpenCLCpuKernel(opcode, in, Array(fieldType), needActor)
{
  /** Create a short string for debugging. */
  override def toString: String =
    getClass.getSimpleName + "_" + id + "(" + opcode.toString + ") => " + fieldType.toString +
          (if (name == "") name else " '" + name + "'") + ", inputs = " + inputFieldTypesString

  /** Satisfies requirement for compute method with multiple outputs. */
  final def compute(in: Array[OpenCLFieldRegister], out: Array[OpenCLFieldRegister]): Unit = {
    compute(in, out(0))
  }

  /** Code which the user kernel must execute. Single output assumed. */
  def compute(in: Array[OpenCLFieldRegister], out: OpenCLFieldRegister): Unit

}

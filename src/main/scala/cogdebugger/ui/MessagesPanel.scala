/*
 * (c) Copyright 2016 Hewlett Packard Enterprise Development LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cogdebugger.ui

import scala.swing._

/** Panel for showing messages generated by the application.
  * Intended to eliminate tons of flipping back and forth between the browser
  * and an IDE. */
class MessagesPanel extends BorderPanel {
  import MessagesPanel._

  /** If true, echoes any messages or errors received through Swing's event
    * mechanism to standard out or standard error (in addition to displaying
    * in this panel). */
  var echoMode = true

  val console = new TextArea()
  console.editable = false

  add(new Label("Messages", null, Alignment.Left), BorderPanel.Position.North)
  add(new ScrollPane(console), BorderPanel.Position.Center)

  reactions += {
    case Message(msg) => postMessage(msg)
    case ErrMsg(err) => postError(err)
    case Clear => clear()
  }

  protected def postMessage(message: String) {
    if (echoMode) Console.out.println(message)
    console.append(message + "\n")
    console.caret.position = console.text.length
  }
  protected def postError(error: String) {
    if (echoMode) Console.err.println(error)
    // TODO Set text color to red in the GUI's own message box (Console.err is
    // colored alread)
    console.append(error + "\n")
  }
  protected def clear() { Swing.onEDT(console.text = "") }

}

object MessagesPanel {
  /** Events supported by [[cogdebugger.ui.MessagesPanel]]. */
  trait MessageEvent extends event.Event
  case class Message(msg: String) extends MessageEvent
  case class ErrMsg(error: String) extends MessageEvent
  case object Clear extends MessageEvent
}
